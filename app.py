import os
from fastapi import FastAPI, File, UploadFile, Request
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from PIL import Image
import google.generativeai as genai
from io import BytesIO

# Initialize the FastAPI application
app = FastAPI()

# Configure the Jinja2 template directory
templates = Jinja2Templates(directory="templates")


def configure_genai():
    """
    Configure the Generative AI with the provided API key.
    Ensure the API key is set in the environment variables.
    """
    genai.configure(api_key=os.getenv(
        'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'))


def initialize_model():
    """
    Initialize the Generative AI model.
    Returns the Gemini model instance.
    """
    return genai.GenerativeModel('gemini-1.5-pro')


async def process_image(model, image):
    """
    Process the input image by using the Generative AI model.

    Parameters:
    - model: The Generative AI model instance.
    - image: The image to be analyzed.

    Returns:
    - The response text generated by the model.
    """
    # Define the prompt for the AI model to analyze plant diseases.
    prompt = """วิเคราะห์โรคในใบพืช,ต้นเหตุที่คาดว่าน่าจะเป็นเหตุผลให้เกิดโรคนี้,และวิธีการรักษา """

    # Use the model to generate content based on the prompt and image
    response = model.generate_content([prompt, image])
    return response.text


@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """
    Render the upload page for the user.

    Parameters:
    - request: The FastAPI request object.

    Returns:
    - The rendered HTML page.
    """
    return templates.TemplateResponse("upload.html", {"request": request})


@app.post("/process-receipt/")
async def process_receipt(file: UploadFile = File(...)):
    """
    Handle the uploaded file, process it with the AI model, and return the analysis result.

    Parameters:
    - file: The uploaded image file.

    Returns:
    - JSON response containing the result or error details.
    """
    try:
        # Read the contents of the uploaded file
        contents = await file.read()
        # Open the image using PIL
        image = Image.open(BytesIO(contents))

        # Configure the Generative AI and initialize the model
        configure_genai()
        model = initialize_model()

        # Process the image and get the analysis result
        response_text = await process_image(model, image)

        return {
            "status": "success",
            "text": response_text
        }

    except Exception as e:
        # Handle any exceptions and return error details
        return {
            "status": "error",
            "error": str(e)
        }


def setup_directories_and_files():
    """
    Create necessary directories and HTML files if they do not exist.
    This sets up the templates folder and ensures the web page is ready to use.
    """
    os.makedirs("templates", exist_ok=True)

    # Create the upload.html file in the templates directory
    with open("templates/upload.html", "w", encoding="utf-8") as f:
        f.write("""
<!DOCTYPE html>
<html>
<head>
    <title>วิเคราะห์โรคในใบพืชด้วยGemini</title>
    <style>
        /* Add custom styles for the upload page */
        body {
            font-family: 'Sarabun', Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(to bottom, #e3f2fd, #f5f5f5);
            color: #34495e;
        }
        .container {
            text-align: center;
            background: #ffffff;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            animation: fadeIn 0.8s ease-in-out;
        }
        /* Other styles omitted for brevity */
    </style>
    <script>
        // Function to preview the uploaded image
        function previewImage(event) {
            const preview = document.getElementById('preview');
            const file = event.target.files[0];
            const reader = new FileReader();

            reader.onload = function() {
                preview.src = reader.result;
                preview.style.display = 'inline';
            }

            if (file) {
                reader.readAsDataURL(file);
            }
        }

        // Function to handle the form submission and fetch results
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData();
            const fileInput = document.getElementById('imageInput');
            const resultDiv = document.getElementById('result');
            
            if (fileInput.files.length === 0) {
                alert('กรุณาเลือกไฟล์ภาพ');
                return;
            }

            formData.append('file', fileInput.files[0]);
            resultDiv.innerHTML = '<div class="loading">กำลังประมวลผล...</div>';
            resultDiv.style.display = 'block';

            try {
                const response = await fetch('/process-receipt/', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();
                resultDiv.innerHTML = formatResults(data);
            } catch (error) {
                resultDiv.innerHTML = '<div class="error">เกิดข้อผิดพลาด: ' + error.message + '</div>';
            }
        });
    </script>
</head>
<body>
    <div class="container">
        <h1>วิเคราะห์โรคในใบพืชด้วยGemini</h1>
        <div class="upload-form">
            <form id="uploadForm">
                <input type="file" id="imageInput" accept="image/*" onchange="previewImage(event)">
                <br><br>
                <img id="preview" style="display: none;">
                <br>
                <button type="submit">เริ่มการวิเคราะห์</button>
            </form>
        </div>
        <div id="result" class="result" style="display: none;"></div>
    </div>
</body>
</html>
""")


# Run the FastAPI application if this file is executed directly
if __name__ == "__main__":
    setup_directories_and_files()
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
